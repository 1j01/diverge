{"version":3,"sources":["providers/DatabaseProvider.js","providers/OriginalJokeProvider.js","app.js"],"names":["psuedo_db","DatabaseProvider","prototype","query","OriginalJokeProvider","this","suffix","current_text","index","input","document","getElementById","canvas","ctx","getContext","paths","providers","query_providers","path_strings","i","length","provider","concat","value","selectionStart","old_paths_left","path_strings_left","j","path_string","k","old_path","string","push","splice","set_string","path","Path","view_center_x","font_size","line_height","cursor_blink_timer","cursor_blink_on","previous_text","previous_selection_end","glyph_canvas_map","Map","get_glyph_canvas","char","has","get","glyph_canvas","createElement","glyph_ctx","font","width","measureText","glyph_width","height","textAlign","textBaseline","fillText","set","glyphs","x","y","rot","alpha","x_vel","y_vel","rot_vel","alpha_to","new_string","old_glyphs","old_string","old_string_index","old_char","prev_glyph","simulate","matched","place_y","selection_end_pos","place_x","glyph","x_to","y_to","Math","min","max","localStorage","e","addEventListener","preventDefault","focus","animate","t","requestAnimationFrame","window","innerWidth","innerHeight","resize","clearRect","text","start_pos","end_pos","selectionEnd","lower_pos","upper_pos","before","slice","inside","after","before_width","inside_width","save","translate","fillStyle","fillRect","input_focused","activeElement","hasFocus","toLowerCase","indexOf","rotate","globalAlpha","drawImage","restore"],"mappings":"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","file":"static/js/main.71ca7f0f.chunk.js","sourcesContent":["\r\nvar psuedo_db = [\r\n\t\"Hello world!\",\r\n\t\"That quick brown fox was jumping all around\",\r\n\t\"The quick brown fox was jumping all around\",\r\n\t\"The quick brown fox jumps over lazydawgs\",\r\n\t\"The quick brown fox jumps over a lazy dog\",\r\n\t\"Sphinx of black quartz, judge my vow.\",\r\n\t\"The previous pigeon tempers the crystal answer.\",\r\n\t\"Over the definite minimalist overlaps this grateful drama.\",\r\n\t\"A shortened analogue baffles the percentage on top of the acoustic client.\",\r\n\t\"An abbreviated analog confuses the rate on top of the acoustic customer.\",\r\n\t\"Will the client deduce the modern paint?\",\r\n\t\"An egg attacks!\",\r\n\t\"Does the outstanding immortal reach past the absolute?\",\r\n\t\"Our still-competitor lands the aircraft next to his opening taste.\",\r\n\t\"A sushi-centric motif, but with so many pairs of chopsticks, and only one piece of sushi\",\r\n\t\"What is this trying to say? There are ways of thinking that don't exist yet\",\r\n\t\"What is this trying to say? There are ways of thinking that haven't been invented\",\r\n\t\"What is this trying to say? There are ways of thinking that haven't been discovered\",\r\n\t\"What is this trying to say? There are ways of thinking that haven't been thought of\",\r\n\t\"What is this trying to say? There are ways of thinking that haven't been thought of yet\",\r\n\t\"What are you trying to say?\",\r\n\t\"Who are *you*?\",\r\n\t\"This isn't trying to solve a problem.\",\r\n\t\"I want to explore.\",\r\n\t\"I implore you to explore the text galore\",\r\n\t\"where there's text, there's always more\",\r\n\t\"there's always more, there's always more\",\r\n\t\"there's always more... there's always more...\",\r\n\t\"The medium is the message.\",\r\n\t\"The Medium is the Message\",\r\n\t\"The Medium is the Massage\",\r\n\t\"The Medium is the Mess Age\",\r\n\t\"The Medium is the Mass Age\",\r\n\t\"Diverge at every letter\",\r\n\t\"Diverge at every word and any letter\",\r\n\t\"Diverge at any word or letter\",\r\n\t\"alphabeta-magneta\",\r\n\t\"alphabetic-magnetic\",\r\n\t\"alphabetically magnetic\",\r\n\t\"start from nothing\",\r\n\t\"start from nothing, end up with something\",\r\n\t\"start from nothing, end up somewhere you didn't expect\",\r\n\t\"start from something, end up somewhere you didn't expect\",\r\n\t\"Textploration incarnate.\",\r\n\t\"A new medium of text.\",\r\n\t\"A new medium for text.\",\r\n\t\"A medium for massaging text.\",\r\n\t\"A new medium for textploration.\",\r\n\t\"It's a bit of a surprise to see you again for the first time.\",\r\n\t\"Once upon a time,\",\r\n\t\"Once upon a time, there was a\",\r\n\t\"Once upon a time, there was a time that wasn't once; it was twice and it was thrice, all because of a device.\",\r\n\t\"Once upon a time, there was a time that wasn't once; it was twice and it was thrice, all because of this device. It was\",\r\n\t\"The utter minimalism of a centered blinking cursor is appealing.\",\r\n\t\"while the world was not perfect, we could and would make it better.\",\r\n\t\"i can work with that.\",\r\n\t\"QWERTYUIOPASDFGHJKLZXCVBNM 1234567890 `~-_=+[{]}\\\\|;:'\\\",<.>/?\",\r\n\t\"qwertopia\",\r\n\t\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\r\n\t\"asdlkjlakjdflskjdf\",\r\n\t\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec fringilla sed arcu id consequat. Nulla nec urna sed lectus semper cursus. Nunc quis rhoncus elit, sed tincidunt odio. Sed ornare fringilla sem, non fringilla nibh sagittis eget. Integer commodo nulla elit, in efficitur augue venenatis eget. Proin id metus vel neque convallis sagittis eget eu turpis. Nulla lacinia nec sem et posuere. Aliquam ex magna, lacinia sed erat a, accumsan ullamcorper nunc. Integer non est sodales, mollis lorem egestas, molestie mauris. Fusce pharetra leo sit amet urna porttitor, at eleifend tortor maximus.\",\r\n\t\"]0301/134429.526:ERROR:exception_handler_server.cc(524)] ConnectNamedPipe: The pipe is being closed. (0xE8)\"\r\n];\r\n\r\nfunction DatabaseProvider(){\r\n\t\r\n}\r\n\r\nDatabaseProvider.prototype.query = function(){\r\n\treturn psuedo_db;\r\n};\r\n\r\nexport default DatabaseProvider;\r\n","\r\nfunction OriginalJokeProvider(){\r\n\t// this.suffix = \"...in bed\";\r\n\t// this.suffix = \"...Laaast Niiiiiight\";\r\n\tthis.suffix = \"(no pun intended)\"; // https://xkcd.com/559/\r\n}\r\n\r\nOriginalJokeProvider.prototype.query = function(current_text, index){\r\n\treturn [current_text + \" \" + this.suffix];\r\n};\r\n\r\nexport default  OriginalJokeProvider;\r\n","import DatabaseProvider from \"./providers/DatabaseProvider\";\r\n// import MarkovProvider from \"./providers/MarkovProvider\";\r\nimport OriginalJokeProvider from \"./providers/OriginalJokeProvider\";\r\nimport \"./app.css\";\r\n\r\n// FIXME: the Menu key opens a menu with the context of the canvas instead of the input in chrome\r\n// chrome apparently triggers a secondary click at the focused element's location\r\n// so it has to be on top and have pointer-events and everything\r\n// TODO: we want the menu to open up in a reasonable location\r\n// so we'll need to position the input\r\n// and if we're positioning the input, maybe we can just use that\r\n// and get pointer-based selection and other benefits\r\n\r\n// const container = document.getElementById(\"root\");\r\nconst input = document.getElementById(\"input\");\r\nconst canvas = document.getElementById(\"canvas\");\r\nconst ctx = canvas.getContext(\"2d\");\r\n\r\nlet paths = [];\r\n\r\nconst providers = [\r\n\tnew DatabaseProvider(),\r\n\t// new MarkovProvider({\r\n\t// \torder: 3,\r\n\t// \tcorpusText: `Let me show another prototype interface illustrating the two heuristics I've identified. This second prototype is intended to help us explore two-dimensional projectile motion. Although that may sound similar to the energy surface prototype – it's just classical mechanics in one more spatial dimension! – it's actually a very different subject, and the interface is, accordingly, very different. It's also more ambitious than the prototype for one-dimensional motion, in that I'll use it to attack a problem I didn't know how to solve before building the interface. As before, it's a rough sketch, and presumes comfort with basic mechanics and mathematics. Let's take a look*`\r\n\t// }),\r\n\tnew OriginalJokeProvider(),\r\n];\r\n\r\nconst query_providers = ()=> {\r\n\tlet path_strings = [];\r\n\tfor (let i = 0; i < providers.length; i++) {\r\n\t\tconst provider = providers[i];\r\n\t\tpath_strings = path_strings.concat(provider.query(input.value, input.selectionStart));\r\n\t}\r\n\r\n\tlet old_paths_left = paths;\r\n\tlet path_strings_left = path_strings;\r\n\tpaths = [];\r\n\r\n\tfor (let j = 0; j < path_strings_left.length; j++) {\r\n\t\tlet path_string = path_strings_left[j];\r\n\t\tfor (let k = 0; k < old_paths_left.length; k++) {\r\n\t\t\tconst old_path = old_paths_left[k];\r\n\t\t\tif (old_path.string === path_string) {\r\n\t\t\t\tpaths.push(old_path);\r\n\t\t\t\tpath_strings_left.splice(j, 1); j--;\r\n\t\t\t\told_paths_left.splice(k, 1); k--;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let j = 0; j < path_strings_left.length; j++) {\r\n\t\tconst path_string = path_strings_left[j];\r\n\t\tfor (let k = 0; k < old_paths_left.length; k++) {\r\n\t\t\tconst old_path = old_paths_left[k];\r\n\t\t\tif (old_path.string[0] === path_string[0]) {\r\n\t\t\t\told_path.set_string(path_string);\r\n\t\t\t\tpaths.push(old_path);\r\n\t\t\t\tpath_strings_left.splice(j, 1); j--;\r\n\t\t\t\told_paths_left.splice(k, 1); k--;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let j = 0; j < path_strings_left.length; j++) {\r\n\t\tconst path_string = path_strings_left[j];\r\n\t\tconst path = new Path(path_string);\r\n\t\tpaths.push(path);\r\n\t}\r\n};\r\n\r\nlet view_center_x = 0;\r\n\r\nconst font_size = 20;\r\nconst line_height = 25;\r\n\r\nlet cursor_blink_timer = 0;\r\nlet cursor_blink_on = true;\r\n\r\nlet previous_text = \"\";\r\nlet previous_selection_end = 0;\r\n\r\nconst glyph_canvas_map = new Map();\r\nconst get_glyph_canvas = (char)=> {\r\n\tif (glyph_canvas_map.has(char)) {\r\n\t\treturn glyph_canvas_map.get(char);\r\n\t} else {\r\n\t\tconst glyph_canvas = document.createElement(\"canvas\");\r\n\t\tconst glyph_ctx = glyph_canvas.getContext(\"2d\");\r\n\t\tglyph_ctx.font = font_size + \"px Arial\";\r\n\t\tconst width = glyph_ctx.measureText(char).width;\r\n\t\t// TODO: use width based the surrounding characters for kerning (ideally)\r\n\t\t// the +5 to width below is mainly for f\r\n\t\tglyph_canvas.glyph_width = width;\r\n\t\tglyph_canvas.width = width + 5;\r\n\t\tglyph_canvas.height = line_height + 5;\r\n\r\n\t\tglyph_ctx.font = font_size + \"px Arial\";\r\n\t\tglyph_ctx.textAlign = \"left\";\r\n\t\tglyph_ctx.textBaseline = \"top\";\r\n\t\tglyph_ctx.fillText(char, 0, 5);\r\n\t\tglyph_canvas_map.set(char, glyph_canvas);\r\n\t\treturn glyph_canvas;\r\n\t}\r\n};\r\n\r\nfunction Path(string) {\r\n\tthis.string = string;\r\n\tthis.glyphs = [];\r\n\tfor (let j = 0; j < string.length; j++) {\r\n\t\tconst char = string[j];\r\n\t\tthis.glyphs.push({\r\n\t\t\tchar: char,\r\n\t\t\tglyph_canvas: get_glyph_canvas(char),\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\trot: 0,\r\n\t\t\talpha: 0,\r\n\t\t\t// x_to: 0,\r\n\t\t\t// y_to: 0,\r\n\t\t\t// rot_to: 0,\r\n\t\t\tx_vel: 0,\r\n\t\t\ty_vel: 0,\r\n\t\t\trot_vel: 0,\r\n\t\t\talpha_to: 0,\r\n\t\t});\r\n\t}\r\n}\r\nPath.prototype.set_string = function(new_string) {\r\n\tconst old_glyphs = this.glyphs;\r\n\tconst old_string = this.string;\r\n\r\n\tthis.string = new_string;\r\n\tthis.glyphs = [];\r\n\r\n\tlet old_string_index = 0;\r\n\tfor (let j = 0; j < new_string.length; j++) {\r\n\t\tconst old_char = old_string[old_string_index];\r\n\t\tconst char = new_string[j];\r\n\t\tif (char === old_char) {\r\n\t\t\tthis.glyphs.push(old_glyphs[old_string_index]);\r\n\t\t\told_string_index++;\r\n\t\t} else {\r\n\t\t\tconst prev_glyph = this.glyphs[this.glyphs.length - 1];\r\n\t\t\tthis.glyphs.push({\r\n\t\t\t\tchar: char,\r\n\t\t\t\tglyph_canvas: get_glyph_canvas(char),\r\n\t\t\t\tx: prev_glyph ? prev_glyph.x + prev_glyph.glyph_canvas.glyph_width : 0,\r\n\t\t\t\ty: prev_glyph ? prev_glyph.y : 0,\r\n\t\t\t\trot: 0,\r\n\t\t\t\talpha: 0,\r\n\t\t\t\t// x_to: 0,\r\n\t\t\t\t// y_to: 0,\r\n\t\t\t\t// rot_to: 0,\r\n\t\t\t\tx_vel: 0,\r\n\t\t\t\ty_vel: 0,\r\n\t\t\t\trot_vel: 0,\r\n\t\t\t\talpha_to: 0,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// TODO: use Hirschberg's algorithm for sequence alignment\r\n// https://en.wikipedia.org/wiki/Hirschberg%27s_algorithm\r\n\r\n// Path.prototype.matchTo = function(string) {\r\n// \tconst dist = Levenshtein.get(this.string, string);\r\n// \treturn dist / (Math.max(this.string.length, string.length) + 1);\r\n// }\r\n\r\nconst completely_faded_out_point = 30;\r\nconst fade_out_over = 20;\r\n\r\nPath.prototype.simulate = function(matched, place_y, selection_end_pos) {\r\n\tlet place_x = 0;\r\n\tfor (let j = 0; j < this.glyphs.length; j++) {\r\n\t\tconst glyph = this.glyphs[j];\r\n\t\tconst prev_glyph = this.glyphs[j - 1];\r\n\t\tif (prev_glyph) {\r\n\t\t\tplace_x = prev_glyph.x_to + prev_glyph.glyph_canvas.glyph_width;\r\n\t\t\t// this will give a squishy rollout, and works better with a faster transition\r\n\t\t\t// place_x = prev_glyph.x + prev_glyph.glyph_canvas.glyph_width;\r\n\t\t}\r\n\t\tglyph.x_to = place_x;\r\n\t\t// glyph.x_to = matched && place_x;\r\n\t\tglyph.y_to = place_y;// + Math.sin(place_x / 50) * 5;\r\n\t\tglyph.alpha_to = matched && Math.min(1, Math.max(0, (selection_end_pos - j + completely_faded_out_point) / fade_out_over));\r\n\t\t// glyph.x += (glyph.x_to - glyph.x) / 20;\r\n\t\t// // glyph.x += (glyph.x_to - glyph.x) / 5;\r\n\t\t// glyph.y += (glyph.y_to - glyph.y) / 15;\r\n\t\t// glyph.alpha += (glyph.alpha_to - glyph.alpha) / 10;\r\n\t\tglyph.alpha += (glyph.alpha_to - glyph.alpha) / 4;\r\n\t\t// place_x += glyph_canvas.glyph_width;\r\n\r\n\t\t// const force = 1/50;\r\n\t\t// const damping = 0.1;\r\n\t\t// const force = 1/20;\r\n\t\t// const damping = 0.2;\r\n\t\t// const force = 1/20;\r\n\t\t// const damping = 1;\r\n\t\tconst force = 1/2;\r\n\t\tconst damping = 2;\r\n\t\tglyph.x_vel += (glyph.x_to - glyph.x) * force;\r\n\t\tglyph.y_vel += (glyph.y_to - glyph.y) * force;\r\n\t\tglyph.x_vel /= 1 + damping;\r\n\t\tglyph.y_vel /= 1 + damping;\r\n\t\tglyph.x += glyph.x_vel;\r\n\t\tglyph.y += glyph.y_vel;\r\n\t}\r\n}\r\n\r\nfunction resize() {\r\n\tconst width = window.innerWidth;\r\n\tconst height = window.innerHeight;\r\n\tif (canvas.width !== width) canvas.width = width;\r\n\tif (canvas.height !== height) canvas.height = height;\r\n}\r\n\r\nfunction animate(t) {\r\n\trequestAnimationFrame(animate);\r\n\tresize();\r\n\r\n\tctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\tctx.font = font_size + \"px/\" + line_height + \"px Arial\";\r\n\r\n\tconst text = input.value;\r\n\r\n\tconst start_pos = input.selectionStart;\r\n\tconst end_pos = input.selectionEnd;\r\n\t// NOTE: selectionStart amd selectionEnd are already min and max indexes\r\n\t// (NOT \"where you started\" and \"where you're selecting to\")\r\n\t// there's selectionDirection which can be \"forward\", \"backward\", or \"none\"\r\n\r\n\tconst lower_pos = Math.min(start_pos, end_pos);\r\n\tconst upper_pos = Math.max(start_pos, end_pos);\r\n\r\n\tconst before = text.slice(0, lower_pos);\r\n\tconst inside = text.slice(lower_pos, end_pos);\r\n\tconst after = text.slice(end_pos);\r\n\r\n\t// const all_text_metrics = ctx.measureText(text);\r\n\t// console.log(all_text_metrics.fontBoundingBoxDescent);\r\n\tconst before_width = ctx.measureText(before).width;\r\n\tconst inside_width = ctx.measureText(inside).width;\r\n\t// const after_width = ctx.measureText(after).width;\r\n\r\n\tif (text !== previous_text || end_pos !== previous_selection_end || end_pos !== start_pos) {\r\n\t\tcursor_blink_on = true;\r\n\t\tcursor_blink_timer = 0; // could be negative\r\n\t}\r\n\tcursor_blink_timer += 1;\r\n\tif (cursor_blink_timer > 40) {\r\n\t\tcursor_blink_on = !cursor_blink_on;\r\n\t\tcursor_blink_timer = 0;\r\n\t}\r\n\r\n\t// TODO: center the controlled end of the selection (need to check input.selectionDirection)\r\n\tview_center_x += (before_width - view_center_x) / 20;\r\n\r\n\tctx.save();\r\n\tctx.translate(canvas.width/2, canvas.height/2);\r\n\tctx.translate(-view_center_x, 0);\r\n\tctx.fillStyle = \"rgba(0, 120, 255, 0.56)\";\r\n\tctx.fillRect(before_width, -font_size, inside_width, line_height);\r\n\tctx.fillStyle = \"black\";\r\n\tctx.fillText(before, 0, 0);\r\n\tctx.fillStyle = \"white\";\r\n\tctx.fillText(inside, before_width, 0);\r\n\tctx.fillStyle = \"black\";\r\n\tctx.fillText(after, before_width + inside_width, 0);\r\n\r\n\tconst input_focused = document.activeElement === input && document.hasFocus();\r\n\tif (cursor_blink_on && input_focused) {\r\n\t\tif (end_pos === start_pos) {\r\n\t\t\tctx.fillRect(before_width, -font_size, 2, line_height);\r\n\t\t}\r\n\t\t// if (input.selectionDirection === \"backward\") {\r\n\t\t// \tctx.fillRect(before_width, -font_size, 2, line_height);\r\n\t\t// } else if (input.selectionDirection === \"forward\") {\r\n\t\t// \tctx.fillRect(before_width + inside_width, -font_size, 2, line_height);\r\n\t\t// }\r\n\t}\r\n\r\n\tlet place_y = 0;\r\n\tfor (let i = 0; i < paths.length; i++) {\r\n\t\tconst path = paths[i];\r\n\t\t// let place_y = (1 + i) * line_height;\r\n\t\t// console.log(path.matchTo(text))\r\n\t\t// if (path.matchTo(text) > 0.9) {\r\n\t\t// \tplace_y = innerHeight;\r\n\t\t// }\r\n\r\n\t\t// let str_dist = Levenshtein.get(path.string, text);\r\n\r\n\t\t// TODO: uniquify truncated strings,\r\n\t\t// and probably weigh paths higher if there are multiple results for it\r\n\t\t// and/or visually indicate that case specifically somehow\r\n\t\t// TODO: actually match paths together and show them branching off\r\n\t\t// if (path.string.toLowerCase().indexOf(text.toLowerCase()) === 0) {\r\n\t\tconst matched = path.string.toLowerCase().indexOf(text.toLowerCase()) === 0;\r\n\t\tpath.simulate(matched, place_y, upper_pos);\r\n\t\t// ctx.rotate(0.04);\r\n\t\tctx.rotate(0.04 * (path.glyphs[0] && path.glyphs[0].alpha));\r\n\t\tfor (let j = 0; j < path.glyphs.length; j++) {\r\n\t\t\t// ctx.rotate(0.001);\r\n\t\t\t// ctx.save();\r\n\t\t\t// ctx.rotate(-0.1);\r\n\t\t\tconst glyph = path.glyphs[j];\r\n\t\t\tconst glyph_canvas = glyph.glyph_canvas;\r\n\t\t\tctx.globalAlpha = glyph.alpha;\r\n\t\t\t// ctx.rotate(0.002 * glyph.alpha);\r\n\t\t\t// ctx.rotate(-0.002 * glyph.alpha * (1 + 0.1 * (i%10)));\r\n\t\t\t// ctx.rotate(0.002 * glyph.alpha * (1 + 0.1 * (i%10)));\r\n\t\t\t// ctx.rotate(0.002 * glyph.alpha * (1 + 10 * (i%10)));\r\n\t\t\t// ctx.rotate(0.002 * glyph.alpha * (1 + 10 * (j%10)));\r\n\t\t\t// ctx.rotate(0.002 * glyph.alpha * (1 + 100 * (j%10)));\r\n\t\t\t// FIXME: blurry text\r\n\t\t\tctx.drawImage(glyph_canvas, glyph.x, glyph.y);\r\n\t\t\t// ctx.drawImage(glyph_canvas, ~~glyph.x, ~~glyph.y);\r\n\t\t\t// ctx.restore();\r\n\t\t}\r\n\t\tif (matched) {\r\n\t\t\tplace_y += line_height;\r\n\t\t}\r\n\t}\r\n\tctx.globalAlpha = 1;\r\n\r\n\tctx.restore();\r\n\r\n\r\n\tprevious_text = text;\r\n\tprevious_selection_end = end_pos;\r\n\r\n}\r\n\r\n/*function fullscreen() {\r\n\tif (container.requestFullscreen) {\r\n\t\tcontainer.requestFullscreen();\r\n\t} else if (container.msRequestFullscreen) {\r\n\t\tcontainer.msRequestFullscreen();\r\n\t} else if (container.mozRequestFullScreen) {\r\n\t\tcontainer.mozRequestFullScreen();\r\n\t} else if (container.webkitRequestFullscreen) {\r\n\t\tcontainer.webkitRequestFullscreen();\r\n\t}\r\n}*/\r\n\r\ntry{\r\n\tinput.value = localStorage[\"diverge current path\"] || \"\";\r\n}catch(e){}\r\nquery_providers();\r\n\r\ninput.addEventListener(\"focus\", ()=> {\r\n\tcursor_blink_timer = 0;\r\n\tcursor_blink_on = true;\r\n});\r\n\r\ninput.addEventListener(\"input\", ()=> {\r\n\ttry{\r\n\t\tlocalStorage[\"diverge current path\"] = input.value;\r\n\t}catch(e){}\r\n\tquery_providers();\r\n});\r\n\r\ncanvas.addEventListener(\"mousedown\", (e)=> {\r\n\te.preventDefault();\r\n\tinput.focus();\r\n}, false);\r\n\r\nanimate();\r\n"],"sourceRoot":""}